# Found Kingdom Effect (BoK)
blood_kingdom_effect = {
	custom_tooltip = create_new_kingdom
	show_as_tooltip = {
		every_held_title = {
			custom = create_title_every_held_duchy
			limit = { tier = tier_duchy }
			custom_tooltip = create_custom_kingdom_de_jure_changes
		}
	}

	# Adds dynasty modifier related to the Ancestral Throne
	dynasty = {
		add_dynasty_modifier = {
			modifier = ancestral_throne
		}
	}

	# Hidden effect for creating a dynamic title and handling vassals
	hidden_effect = {
		save_scope_as = founder
		primary_title = { save_scope_as = old_title }

		# Create the new dynamic kingdom title
		create_dynamic_title = {
			tier = kingdom
			name = BLOOD_TITLE_NAME
		}

		# Handle vassal change after kingdom creation
		create_title_and_vassal_change = {
			type = created
			save_scope_as = change
			add_claim_on_loss = no
		}

		# Assign the new title to the character
		scope:new_title = {
			change_title_holder = {
				holder = root
				change = scope:change
			}
		}

		# Resolve any title and vassal change issues
		resolve_title_and_vassal_change = scope:change

		# Check if all territories belong to a single empire, making the kingdom de jure of that empire
		every_sub_realm_county = {
			if = {
				limit = { exists = empire }
				empire = {
					if = {
						limit = { NOT = { is_in_list = potential_empires } }
						add_to_list = potential_empires
					}
				}
			}
		}

		if = {
			limit = {
				any_in_list = {
					list = potential_empires
					count > 0
				}
			}
			ordered_in_list = {
				list = potential_empires
				order_by = {
					every_in_de_jure_hierarchy = {
						continue = { tier > tier_county }
						limit = { tier = tier_county holder.top_liege = root }
						add = 1
					}
				}
				position = 0
				save_scope_as = old_empire
			}
		}

		# Set the de jure liege to the appropriate empire, if applicable
		if = { 
			limit = { exists = scope:old_empire } 
			scope:new_title = { set_de_jure_liege_title = scope:old_empire }
		}

		# Update all duchies to belong to the new kingdom
		every_held_title = {
			limit = { tier = tier_duchy }
			if = {
				limit = {
					OR = {
						AND = {
							exists = kingdom
							kingdom = { exists = holder holder = { NOT = { this = root } is_ai = no } }
						}
						AND = {
							exists = empire
							empire = { exists = holder holder = { NOT = { this = root } is_ai = no } }
						}
					}
				}
				add_to_temporary_list = duchy_for_notification
				ROOT = { save_temporary_scope_value_as = { name = send_notifications value = yes } }
			}
			set_de_jure_liege_title = scope:new_title
		}

		# Check for unheld duchies and assign them to the new title
		every_sub_realm_county = {
			limit = {
				exists = duchy
				NOT = { exists = duchy.holder }
				holder.top_liege = root
				duchy = { save_temporary_scope_as = test_duchy }
				holder.top_liege = { completely_controls = scope:test_duchy }
			}
			if = {
				limit = { NOT = { duchy = { is_in_list = additional_de_jure_duchies } } }
				duchy = { set_de_jure_liege_title = scope:new_title add_to_list = additional_de_jure_duchies }
			}
		}

		# Final adjustments to the title, including its COA and capital
		scope:new_title = {
			set_coa = scope:old_title.holder.dynasty
			set_color_from_title = scope:old_title
			set_capital_county = scope:old_title.title_capital_county
		}
		set_primary_title_to = scope:new_title

		# Trigger relevant decision events
		trigger_event = major_decisions.1101

		# Notify players if applicable
		every_player = {
			if = {
				limit = { top_liege = scope:founder NOT = { this = root } }
				trigger_event = major_decisions.1102
			}
			else_if = {
				limit = {
					exists = scope:send_notifications
					NOT = { this = root }
					NOT = { top_liege = scope:founder }
					any_held_title = {
						any_in_de_jure_hierarchy = {
							continue = { tier > tier_duchy }
							tier = tier_duchy
							is_in_list = duchy_for_notification
						}
					}
				}
				every_held_title = {
					every_in_de_jure_hierarchy = {
						continue = { tier > tier_duchy }
						limit = { tier = tier_duchy is_in_list = duchy_for_notification }
						add_to_list = notification_titles
					}
				}
				if = { limit = { any_in_list = { list = notification_titles count > 0 } } trigger_event = major_decisions.1105 }
			}
		}
	}
}

# Give Demon Secret or Trait Effect (BoD)
give_demon_secret_or_trait_effect = {
	save_temporary_scope_as = demon_character
	if = {
		limit = {
			NOR = {
				has_trait = blood_demons
				has_trait = fiendish_allure
				any_secret = { secret_type = secret_demon }
			}
		}
		if = {
			limit = {
				trait_is_shunned_or_criminal_in_my_or_lieges_faith_trigger = { TRAIT = witch GENDER_CHARACTER = scope:witch_character }
			}
			add_secret = { type = secret_demon }
			random_secret = { limit = { secret_type = secret_demon } save_scope_as = demon_secret }
			add_trait = fiendish_allure
		}
		else = { add_trait = blood_demons }
	}
}

# Clean up demon traits/secrets after exposure or conversion
demon_cleanup_effect = {
	$SECRET$ = {
		if = {
			limit = { #Checks to make sure the right target gets saved. Confusion might arise from the secret's "on_expose" effect since it sends the same event (secrets.0008) for both target and owner.
				exists = secret_target
				exists = scope:target
				scope:target = secret_owner
				NOT = { secret_owner = $POV$ } #To not mess up tooltips (in e.g. secrets.0108)
			}
			secret_owner = { save_scope_as = exposed_secret_target }
		}
		else_if = {
			limit = {
				exists = secret_target
			}
			secret_target = { save_scope_as = exposed_secret_target }
		}

		secret_owner = { save_scope_as = local_secret_owner }
	}

	if = {
		limit = { $SECRET$ = { secret_type = secret_demon } }
		remove_trait = fiendish_allure
		add_trait_only_force_tooltip_if_not_pov_effect = { TRAIT = blood_demons POV = $POV$ }
		remove_piety_level_for_shunned_or_criminal_trait_effect = { TRAIT = witch }
	}
}

MythB_debug_bloodline_traits = {
	MythB_give_spec_traits_based_on_bloodline_trait = yes
}

MythB_give_spec_traits_based_on_bloodline_trait = {
	switch = {
		trigger = has_trait
		blood_demons = { add_trait = witch }
		blood_timeless = { add_trait = reincarnation }
		blood_black = { add_trait = cannibal }
	}
}

MythB_solve_immortality_age_of_bloodline_trait = {
	switch = {
		trigger = has_trait
		blood_demons = { set_immortal_age = 29 }
		fiendish_allure = { set_immortal_age = 29 }
	}
}